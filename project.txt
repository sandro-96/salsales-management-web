// src/main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter } from "react-router-dom";
import App from "./App";
import "./index.css";
import AuthProvider from "./contexts/AuthProvider.jsx";
import ShopProvider from "./contexts/ShopProvider.jsx";

ReactDOM.createRoot(document.getElementById("root")).render(
    <React.StrictMode>
        <BrowserRouter>
            <AuthProvider>
                 <ShopProvider>
                     <App />
                 </ShopProvider>
            </AuthProvider>
        </BrowserRouter>
    </React.StrictMode>
);

// src/App.jsx
import { Routes, Route } from "react-router-dom";
import { Suspense } from "react";
import { routeConfig } from "./routes/routeConfig.jsx";
import ProtectedRoute from "./routes/ProtectedRoute";
import GuestOnlyRoute from "./routes/GuestOnlyRoute";
import RoleBasedRoute from "./routes/RoleBasedRoute";
import RouteWithTitle from "./routes/RouteWithTitle";

function renderRoute(route) {
    let element = <RouteWithTitle element={route.element} title={route.title} />;

    if (route.guestOnly) {
        element = <GuestOnlyRoute>{element}</GuestOnlyRoute>;
    }

    if (route.protected) {
        element = (
            <ProtectedRoute>
                {route.roles ? (
                    <RoleBasedRoute allowedRoles={route.roles}>
                        {element}
                    </RoleBasedRoute>
                ) : (
                    element
                )}
            </ProtectedRoute>
        );
    }

    if (route.children) {
        return (
            <Route key={route.path} path={route.path} element={element}>
                {route.children.map((child, i) =>
                    renderRoute({
                        ...child,
                        path: child.path,
                        key: `${route.path}-${child.path || i}`,
                    })
                )}
            </Route>
        );
    }

    return <Route key={route.path} path={route.path} element={element} />;
}

function App() {
    return (
        <Suspense fallback={<div className="p-10 text-center">Đang tải trang...</div>}>
            <Routes>{routeConfig.map(renderRoute)}</Routes>
        </Suspense>
    );
}

export default App;

// src/routes/ProtectedRoute.jsx
import { Navigate } from "react-router-dom";

const ProtectedRoute = ({ children }) => {
    const token = localStorage.getItem("accessToken");
    return token ? children : <Navigate to="/login" />;
};

export default ProtectedRoute;

// src/routes/GuestOnlyRoute.jsx
import { Navigate } from "react-router-dom";
import { useAuth } from "../hooks/useAuth.js";
import { useShop } from "../hooks/useShop.js";

const GuestOnlyRoute = ({ children }) => {
    const { user } = useAuth();
    const { shops, selectedShopId } = useShop();

    if (user) {
        console.log("User is logged in:", user);
        // Nếu là admin → vào trang admin
        if (user.role.includes("ROLE_ADMIN")) {
            return <Navigate to="/admin" replace />;
        }

        // Nếu là user → xử lý theo shop
        if (user.role.includes("ROLE_USER")) {
            if (!shops || shops.length === 0) {
                return <Navigate to="/create-shop" replace />;
            } else if (!selectedShopId) {
                return <Navigate to="/select-shop" replace />;
            } else {
                return <Navigate to="/overview" replace />;
            }
        }

        // Trường hợp có user nhưng không role hợp lệ
        return <Navigate to="/unauthorized" replace />;
    }

    return children;
};

export default GuestOnlyRoute;

// src/pages/VerifyEmailPage.jsx
import { useEffect, useState } from "react";
import { useSearchParams, useNavigate } from "react-router-dom";
import axiosInstance from "../api/axiosInstance";

const VerifyEmailPage = () => {
    const [searchParams] = useSearchParams();
    const navigate = useNavigate();
    const [status, setStatus] = useState("Đang xác minh...");

    useEffect(() => {
        const token = searchParams.get("token");
        if (!token) {
            setStatus("Không tìm thấy token xác minh.");
            return;
        }

        axiosInstance
            .get(`/auth/verify?token=${token}`)
            .then(() => {
                setStatus("Xác minh thành công! Chuyển hướng đến đăng nhập...");
                setTimeout(() => navigate("/login"), 3000);
            })
            .catch((err) => {
                const msg = err?.response?.data?.message || "Xác minh thất bại.";
                setStatus(msg);
            });
    }, [searchParams, navigate]);

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4">
            <div className="bg-white p-8 rounded-lg shadow w-full max-w-md text-center">
                <h2 className="text-xl font-semibold mb-4">Xác minh email</h2>
                <p className="text-gray-700">{status}</p>
            </div>
        </div>
    );
};

export default VerifyEmailPage;

// src/pages/RegisterPage.jsx
import { useState } from "react";
import axiosInstance from "../api/axiosInstance";
import { Link } from "react-router-dom";

const RegisterPage = () => {
    const [form, setForm] = useState({
        email: "",
        password: "",
        confirmPassword: ""
    });
    const [error, setError] = useState("");
    const [success, setSuccess] = useState("");
    const handleChange = (e) => {
        setForm({ ...form, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError("");
        if (form.password !== form.confirmPassword) {
            setError("Mật khẩu không khớp.");
            return;
        }
        try {
            await axiosInstance.post("/auth/register", {
                email: form.email,
                password: form.password
            });
            setSuccess("Đăng ký thành công. Vui lòng kiểm tra email để xác minh tài khoản.");
        } catch (err) {
            setError(err.response?.data?.message || "Đăng ký thất bại.");
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 px-4">
            <form className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md" onSubmit={handleSubmit}>
                <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">Tạo tài khoản mới</h2>
                {error && <p className="text-red-500 text-sm mb-3">{error}</p>}
                {success && <p className="text-green-600 text-sm mb-3">{success}</p>}
                <input
                    type="email"
                    name="email"
                    placeholder="Email"
                    className="w-full mb-3 p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={form.email}
                    onChange={handleChange}
                    required
                />
                <input
                    type="password"
                    name="password"
                    placeholder="Mật khẩu"
                    className="w-full mb-3 p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={form.password}
                    onChange={handleChange}
                    required
                />
                <input
                    type="password"
                    name="confirmPassword"
                    placeholder="Xác nhận mật khẩu"
                    className="w-full mb-5 p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={form.confirmPassword}
                    onChange={handleChange}
                    required
                />
                <button
                    type="submit"
                    className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium"
                >
                    Đăng ký
                </button>
                <p className="text-sm text-center text-gray-600 mt-4">
                    Đã có tài khoản? <Link to="/login" className="text-blue-600 hover:underline">Đăng nhập</Link>
                </p>
            </form>
        </div>
    );
};

export default RegisterPage;

// src/pages/LoginPage.jsx
import { useState } from "react";
import axiosInstance from "../api/axiosInstance";
import { Link, Navigate } from "react-router-dom";
import {jwtDecode} from "jwt-decode";

const LoginPage = () => {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState("");
    const [loading, setLoading] = useState(false);

    const handleLogin = async (e) => {
        setLoading(true);
        e.preventDefault();
        try {
            const res = await axiosInstance.post("/auth/login", { email, password });
            if (res.data.success) {
                const accessToken = res.data.data.accessToken;
                const decoded = jwtDecode(accessToken);
                const role = decoded.role;

                localStorage.setItem("accessToken", accessToken);
                localStorage.setItem("refreshToken", res.data.data.refreshToken);

                if (role.includes("ROLE_ADMIN")) <Navigate to="/admin" />
                else <Navigate to="/select-shop" />
            } else {
                setError(res.data.message || "Đăng nhập thất bại.");
            }
        } catch (err) {
            setError(err.response?.data?.message || "Đăng nhập thất bại.");
        } finally {
            setLoading(false); // luôn được gọi
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-50 px-4">
            <form className="bg-white p-8 rounded-lg shadow-lg w-full max-w-md" onSubmit={handleLogin}>
                <h2 className="text-2xl font-bold mb-6 text-center text-gray-800">Đăng nhập</h2>
                {error && <p className="text-red-500 text-sm mb-3 text-center">{error}</p>}
                <input
                    type="email"
                    placeholder="Email"
                    className="w-full mb-3 p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                />
                <input
                    type="password"
                    placeholder="Mật khẩu"
                    className="w-full mb-5 p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                />
                <button
                    type="submit"
                    disabled={loading}
                    className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium"
                >
                    {loading ? "Đang xử lý..." : "Đăng nhập"}
                </button>
                <div className="text-sm text-center text-gray-600 mt-4 space-y-2">
                    <p>
                        Chưa có tài khoản? <Link to="/register" className="text-blue-600 hover:underline">Đăng ký</Link>
                    </p>
                    <p>
                        <Link to="#" className="text-blue-600 hover:underline">Quên mật khẩu?</Link>
                    </p>
                </div>
            </form>
        </div>
    );
};

export default LoginPage;

// src/pages/ForgotPasswordPage.jsx
import { useState } from "react";
import axiosInstance from "../api/axiosInstance";

const ForgotPasswordPage = () => {
    const [email, setEmail] = useState("");
    const [status, setStatus] = useState("");
    const [error, setError] = useState("");

    const handleSubmit = async (e) => {
        e.preventDefault();
        setStatus("");
        setError("");
        try {
            const res = await axiosInstance.post(`/auth/forgot-password?email=${email}`);
            if (res.data.success) {
                setStatus("Đã gửi yêu cầu đặt lại mật khẩu. Vui lòng kiểm tra email của bạn.");
            } else {
                setError(res.data.message || "Yêu cầu thất bại.");
            }
        } catch (err) {
            setError("Có lỗi xảy ra. Vui lòng thử lại sau.");
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4">
            <form onSubmit={handleSubmit} className="bg-white p-8 rounded-lg shadow w-full max-w-md">
                <h2 className="text-xl font-semibold text-center mb-6">Quên mật khẩu</h2>
                {status && <p className="text-green-600 text-sm mb-4 text-center">{status}</p>}
                {error && <p className="text-red-600 text-sm mb-4 text-center">{error}</p>}
                <input
                    type="email"
                    className="w-full mb-4 p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Nhập email của bạn"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                />
                <button
                    type="submit"
                    className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700"
                >
                    Gửi yêu cầu
                </button>
            </form>
        </div>
    );
};

export default ForgotPasswordPage;


// src/pages/admin/AdminPage.jsx
import React from "react";

const AdminPage = () => {
    return (
        <div>
            <h1>Admin Dashboard</h1>
            <p>Welcome to the Admin Page. Manage your application here.</p>
            {/* Add admin-specific components or features here */}
        </div>
    );
};

export default AdminPage;

// src/layouts/DashboardLayout.jsx
import { Outlet, Link } from "react-router-dom";
import Breadcrumbs from "../components/Breadcrumbs";
import {useShop} from "../hooks/useShop.js";

const DashboardLayout = () => {
    const { isOwner } = useShop();
    return (
        <div className="flex h-screen">
            <aside className="w-64 bg-gray-800 text-white p-4">
                <h2 className="text-xl font-bold mb-4">Sales Manager</h2>
                <nav>
                    <ul className="space-y-2">
                        <li><Link to="/overview">Tổng quan</Link></li>
                        <li><Link to="/products">Sản phẩm</Link></li>
                        {/* ⚙️ Chỉ hiển thị nếu là OWNER */}
                        {isOwner && (
                            <li className="pt-4 border-t border-gray-600">
                                <Link
                                    to="/shop-settings"
                                    className="text-sm text-gray-300 hover:text-white"
                                >
                                    ⚙️ Cài đặt cửa hàng
                                </Link>
                            </li>
                        )}
                    </ul>
                </nav>
            </aside>

            <main className="flex-1 p-6 bg-gray-100 overflow-auto">
                <Breadcrumbs/>
                <Outlet/>
            </main>
        </div>
    );
};

export default DashboardLayout;

// src/hooks/useShop.js
import { useContext } from "react";
import { ShopContext } from "../contexts/ShopContext.js";

export const useShop = () => {
    const context = useContext(ShopContext);
    if (!context) {
        throw new Error("useShop must be used within a ShopProvider");
    }
    return context;
};


// src/hooks/useAuth.js
import { useContext } from "react";
import { AuthContext } from "../contexts/AuthContext.js";

export const useAuth = () => useContext(AuthContext);


// src/contexts/ShopProvider.jsx
import { useState, useEffect } from "react";
import axiosInstance from "../api/axiosInstance";
import { ShopContext } from "./ShopContext";
import { useAuth } from "../hooks/useAuth.js";

const ShopProvider = ({ children }) => {
    const { user } = useAuth();
    const [isLoading, setIsLoading] = useState(true);
    const [shops, setShops] = useState([]);
    const [selectedShopId, setSelectedShopIdState] = useState(null);

    const selectedShop = shops.find(shop => shop.id === selectedShopId) || null;
    const selectedRole = selectedShop?.role || null;
    const isOwner = selectedRole === "OWNER";
    const isStaff = selectedRole === "STAFF";
    const isCashier = selectedRole === "CASHIER";

    const setSelectedShopId = (id) => {
        setSelectedShopIdState(id);
        localStorage.setItem("selectedShopId", id); // Ghi vào localStorage
    };

    const fetchShops = async () => {
        try {
            const res = await axiosInstance.get("/shop/my?page=0&size=1000");
            const shopList = res.data.data;
            setShops(shopList);

            const savedShopId = localStorage.getItem("selectedShopId");
            const validSavedShop = shopList.find(s => s.id === savedShopId);

            if (validSavedShop) {
                setSelectedShopId(savedShopId);
            } else if (shopList.length > 0) {
                setSelectedShopId(shopList[0].id);
            }

            console.log("Đã tải danh sách cửa hàng:", shopList);
        } catch (err) {
            console.error("Lỗi khi tải danh sách cửa hàng", err);
        } finally {
            setIsLoading(false); // ✅ Đánh dấu đã xong
        }
    };

    useEffect(() => {
        if (!user) {
            setIsLoading(false); // Nếu không có user, không cần tải cửa hàng
            return;
        }
        fetchShops();
    }, []);

    return (
        <ShopContext.Provider
            value={{
                shops,
                selectedShopId,
                setSelectedShopId,
                selectedShop,
                selectedRole,
                isOwner,
                isStaff,
                isCashier
            }}
        >
            {isLoading ? (
                <div className="min-h-screen flex items-center justify-center">
                    <p>Đang tải cửa hàng...</p>
                </div>
            ) : (
                children
            )}
        </ShopContext.Provider>
    );
};

export default ShopProvider;

// src/contexts/ShopContext.js
import { createContext } from "react";

export const ShopContext = createContext(null);


// src/contexts/AuthProvider.jsx
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { jwtDecode } from "jwt-decode";
import axiosInstance from "../api/axiosInstance";
import { AuthContext } from "./AuthContext";

const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const navigate = useNavigate();

    const loadUser = () => {
        const token = localStorage.getItem("accessToken");
        if (token) {
            try {
                const decoded = jwtDecode(token);
                setUser({
                    id: decoded.userId,
                    email: decoded.email,
                    role: decoded.role,
                });
            } catch {
                logout();
            }
        }
    };

    const logout = () => {
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        setUser(null);
        navigate("/login");
    };

    const refreshToken = async () => {
        const refreshToken = localStorage.getItem("refreshToken");
        if (!refreshToken) return logout();

        try {
            const res = await axiosInstance.post("/auth/refresh-token", { refreshToken });
            localStorage.setItem("accessToken", res.data.data.accessToken);
            loadUser();
        } catch {
            logout();
        }
    };

    useEffect(() => {
        loadUser();
    }, []);

    return (
        <AuthContext.Provider value={{
            user, logout, refreshToken
        }}>
            {children}
        </AuthContext.Provider>
    );
};

export default AuthProvider;

// src/contexts/AuthContext.js
import { createContext } from "react";
export const AuthContext = createContext(null);

// src/components/shop/ShopSelectDropdown.jsx
import { useShop } from "../../hooks/useShop";
import "./ShopSelectDropdown.scss";

const ShopSelectDropdown = () => {
    const { shops, selectedShopId, setSelectedShopId } = useShop();

    if (shops.length === 0) {
        return <div className="shop-select__empty">Bạn chưa có cửa hàng nào</div>;
    }

    return (
        <div className="shop-select__wrapper">
            <label htmlFor="shop-select" className="shop-select__label">Cửa hàng</label>
            <select
                id="shop-select"
                value={selectedShopId || ""}
                onChange={(e) => setSelectedShopId(e.target.value)}
                className="shop-select__dropdown"
            >
                {shops.map(shop => (
                    <option key={shop.id} value={shop.id}>
                        {shop.name} ({shop.role})
                    </option>
                ))}
            </select>
        </div>
    );
};

export default ShopSelectDropdown;


// src/components/shop/ShopSelectDropdown/index.js
export { default } from "./ShopSelectDropdown";

// src/api/axiosInstance.js
import axios from "axios";

const axiosInstance = axios.create({
    baseURL: import.meta.env.VITE_API_BASE_URL,
    headers: {
        "Content-Type": "application/json",
    },
});

axiosInstance.interceptors.request.use((config) => {
    const token = localStorage.getItem("accessToken");
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

axiosInstance.interceptors.response.use(
    (res) => res,
    async (error) => {
        const originalRequest = error.config;

        // Nếu lỗi là 401 và chưa retry lần nào
        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;

            try {
                const refreshToken = localStorage.getItem("refreshToken");
                if (!refreshToken) throw new Error("No refresh token");

                // Gọi refresh-token endpoint
                const res = await axios.post(
                    `${import.meta.env.VITE_API_BASE_URL}/auth/refresh-token`,
                    { refreshToken },
                    { headers: { "Content-Type": "application/json" } }
                );

                const newAccessToken = res.data.data.accessToken;
                localStorage.setItem("accessToken", newAccessToken);

                // Gắn lại accessToken mới và gọi lại request cũ
                originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
                return axiosInstance(originalRequest);
            } catch (err) {
                // ❌ Refresh token thất bại → logout
                localStorage.removeItem("accessToken");
                localStorage.removeItem("refreshToken");
                window.location.href = "/login";
                return Promise.reject(err);
            }
        }

        return Promise.reject(error);
    }
);
export default axiosInstance;

// src/routes/RoleBasedRoute.jsx
import { Navigate } from "react-router-dom";
import { useAuth } from "../hooks/useAuth";
import { checkPermission } from "../utils/permission";
import {useShop} from "../hooks/useShop.js";

const RoleBasedRoute = ({ allowedRoles = [], shopScoped = false, children }) => {
    const { user } = useAuth();
    const { selectedRole } = useShop();
    if (!user) return <Navigate to="/login" replace />;
    const roleToCheck = shopScoped ? selectedRole : user?.role;
    if (!checkPermission(roleToCheck, allowedRoles)) {
        return <Navigate to="/unauthorized" />;
    }
    return children;
};

export default RoleBasedRoute;

// src/components/Breadcrumbs.jsx
import { Link } from "react-router-dom";
import { useBreadcrumbs } from "../hooks/useBreadcrumbs";

const Breadcrumbs = () => {
    const breadcrumbs = useBreadcrumbs();

    if (breadcrumbs.length <= 1) return null; // Ẩn nếu chỉ có 1 cấp

    return (
        <nav className="text-sm text-gray-600 mb-4">
            {breadcrumbs.map((bc, i) => (
                <span key={bc.path}>
          {i > 0 && <span className="mx-1">/</span>}
                    <Link to={bc.path} className="hover:underline text-blue-600">
            {bc.title}
          </Link>
        </span>
            ))}
        </nav>
    );
};

export default Breadcrumbs;

// src/pages/shop/CreateShopPage.jsx
import { useState } from "react";
import { Navigate } from "react-router-dom";
import axiosInstance from "../../api/axiosInstance";
import { useShop } from "../../hooks/useShop";
import imageCompression from "browser-image-compression";
import { COUNTRIES } from "../../constants/countries";
import { SHOP_TYPES } from "../../constants/shopTypes";

const CreateShopPage = () => {
    const [form, setForm] = useState({
        name: "",
        type: "RESTAURANT",
        address: "",
        phone: "",
        countryCode: "VN"
    });
    const [fileInputKey, setFileInputKey] = useState(Date.now());
    const [imagePreview, setImagePreview] = useState(null);
    const [file, setFile] = useState(null);
    const [errors, setErrors] = useState({});
    const [submitError, setSubmitError] = useState("");
    const { fetchShops } = useShop();

    const handleFileChange = async (e) => {
        const selectedFile = e.target.files[0];
        if (!selectedFile) return;

        const ALLOWED_TYPES = ["image/jpeg", "image/jpg", "image/png"];
        const MAX_FILE_SIZE_MB = 5;

        if (!ALLOWED_TYPES.includes(selectedFile.type)) {
            setSubmitError("Chỉ hỗ trợ định dạng ảnh JPG và PNG.");
            setFile(null);
            setImagePreview(null);
            return;
        }

        if (selectedFile.size > MAX_FILE_SIZE_MB * 1024 * 1024) {
            setSubmitError(`Ảnh vượt quá ${MAX_FILE_SIZE_MB}MB. Đang tiến hành nén ảnh...`);
            try {
                const compressedFile = await imageCompression(selectedFile, {
                    maxSizeMB: 1,
                    maxWidthOrHeight: 1024,
                    useWebWorker: true,
                });

                setFile(compressedFile);
                setImagePreview(URL.createObjectURL(compressedFile));
                setSubmitError(""); // clear error
            } catch (err) {
                console.error("Lỗi khi nén ảnh:", err);
                setSubmitError("Nén ảnh thất bại. Vui lòng chọn ảnh nhỏ hơn.");
                setFile(null);
                setImagePreview(null);
            }

            return;
        }

        setFile(selectedFile);
        setImagePreview(URL.createObjectURL(selectedFile));
        setSubmitError("");
    };

    const handleChange = (e) => {
        setForm({ ...form, [e.target.name]: e.target.value });
        setErrors({ ...errors, [e.target.name]: null });
    };

    const validate = () => {
        const newErrors = {};
        const country = COUNTRIES.find(c => c.code === form.countryCode);

        if (!form.name.trim()) newErrors.name = "Tên cửa hàng không được để trống.";
        if (form.address.trim().length < 10) newErrors.address = "Địa chỉ phải có ít nhất 10 ký tự.";
        if (!country.phonePattern.test(form.phone)) newErrors.phone = `Số điện thoại không hợp lệ cho ${country.name}`;

        return newErrors;
    };


    const handleSubmit = async (e) => {
        e.preventDefault();

        const validationErrors = validate();
        if (Object.keys(validationErrors).length > 0) {
            setErrors(validationErrors);
            return;
        }

        try {
            const formData = new FormData();
            formData.append(
                "shop",
                new Blob([JSON.stringify(form)], { type: "application/json" })
            );

            if (file) {
                formData.append("file", file);
            }

            const res = await axiosInstance.post("/shop", formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });

            if (res.data.code === "SUCCESS") {
                await fetchShops(); // cập nhật lại danh sách cửa hàng
                <Navigate to="/overview" replace={true} />;
            } else {
                setSubmitError(res.data.message || "Tạo cửa hàng thất bại.");
            }
        } catch (err) {
            console.error("Lỗi khi tạo cửa hàng:", err);
            setSubmitError(
                err.response?.data?.message || "Đã xảy ra lỗi khi gửi dữ liệu."
            );
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100 px-4">
            <form onSubmit={handleSubmit} className="bg-white p-8 rounded shadow w-full max-w-md space-y-4" noValidate>
                <h2 className="text-xl font-bold text-center mb-2">Tạo cửa hàng mới</h2>

                {submitError && <p className="text-red-600 text-sm text-center">{submitError}</p>}

                <div>
                    <input
                        type="text"
                        name="name"
                        placeholder="Tên cửa hàng"
                        value={form.name}
                        onChange={handleChange}
                        className="w-full p-3 border rounded focus:ring-2 focus:ring-blue-500"
                    />
                    {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
                </div>

                <div>
                    <select
                        name="type"
                        value={form.type}
                        onChange={handleChange}
                        className="w-full p-3 border rounded focus:ring-2 focus:ring-blue-500"
                    >
                        {SHOP_TYPES.map((opt) => (
                            <option key={opt.value} value={opt.value}>
                                {opt.label}
                            </option>
                        ))}
                    </select>
                    <p className="text-sm text-gray-500 mt-1">
                        {SHOP_TYPES.find((s) => s.value === form.type)?.trackInventory
                            ? "✔️ Loại cửa hàng này sẽ bật quản lý tồn kho."
                            : "⚠️ Loại cửa hàng này không yêu cầu kiểm kho theo mặc định."}
                    </p>
                </div>
                <div>
                    <label className="block mb-1 text-sm text-gray-600">Quốc gia</label>
                    <select
                        name="countryCode"
                        value={form.countryCode}
                        onChange={handleChange}
                        className="w-full p-3 border rounded focus:ring-2 focus:ring-blue-500"
                    >
                        {COUNTRIES.map((country) => (
                            <option key={country.code} value={country.code}>
                                {country.name} ({country.dialCode})
                            </option>
                        ))}
                    </select>
                </div>

                <div>
                    <input
                        type="text"
                        name="address"
                        placeholder="Địa chỉ"
                        value={form.address}
                        onChange={handleChange}
                        className="w-full p-3 border rounded focus:ring-2 focus:ring-blue-500"
                    />
                    {errors.address && <p className="text-red-500 text-sm mt-1">{errors.address}</p>}
                </div>

                <div>
                    <label className="block mb-1 text-sm text-gray-600">Số điện thoại</label>
                    <div className="flex">
                        <span className="px-4 py-3 bg-gray-200 border border-r-0 rounded-l text-gray-700">
                            {COUNTRIES.find(c => c.code === form.countryCode)?.dialCode}
                        </span>
                        <input
                            type="text"
                            name="phone"
                            placeholder="Số điện thoại"
                            value={form.phone}
                            onChange={handleChange}
                            className="flex-1 p-3 border rounded-r focus:ring-2 focus:ring-blue-500"
                        />
                    </div>
                    {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
                </div>

                <div>
                    {imagePreview ? (
                        <div className="mt-2 flex items-center gap-4">
                            <img
                                src={imagePreview}
                                alt="Logo preview"
                                className="w-32 h-32 object-contain border rounded"
                            />
                            <button
                                type="button"
                                onClick={() => {
                                    setFile(null);
                                    setImagePreview(null);
                                    setFileInputKey(Date.now());
                                }}
                                className="text-red-600 underline text-sm"
                            >
                                Xoá ảnh
                            </button>
                        </div>
                    ) : (
                        <input
                            key={fileInputKey}
                            type="file"
                            accept=".jpg,.jpeg,.png"
                            onChange={handleFileChange}
                            className="w-full p-3 border rounded focus:ring-2 focus:ring-blue-500"
                        />
                    )}
                </div>
                {submitError && (
                    <p className="text-red-600 text-sm text-center">{submitError}</p>
                )}
                <button
                    type="submit"
                    className="w-full bg-blue-600 text-white py-3 rounded hover:bg-blue-700"
                >
                    Tạo cửa hàng
                </button>
            </form>
        </div>
    );
};

export default CreateShopPage;

// src/pages/NotFoundPage.jsx
const NotFoundPage = () => {
    return (
        <div className="h-screen flex flex-col items-center justify-center bg-gray-100 px-4 text-center">
            <h1 className="text-5xl font-bold text-gray-800 mb-4">404</h1>
            <p className="text-xl text-gray-600 mb-6">Trang bạn yêu cầu không tồn tại.</p>
            <a
                href="/"
                className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition"
            >
                Quay về trang chủ
            </a>
        </div>
    );
};

export default NotFoundPage;

// src/pages/OverviewPage.jsx
import { useShop } from "../hooks/useShop";

const OverviewPage = () => {
    const { selectedShop, selectedRole, isOwner, isStaff, isCashier } = useShop();

    if (!selectedShop) return <p>Đang tải cửa hàng...</p>;

    return (
        <div className="p-6">
            <h1 className="text-2xl font-bold mb-4">Tổng quan cửa hàng</h1>
            <p><strong>Cửa hàng:</strong> {selectedShop.name}</p>
            <p><strong>Vai trò:</strong> {selectedRole}</p>

            {isOwner && <p className="mt-4 text-green-700">Bạn là chủ cửa hàng. Bạn có toàn quyền.</p>}
            {isStaff && <p className="mt-4 text-blue-700">Bạn là nhân viên. Có quyền quản lý sản phẩm, đơn hàng.</p>}
            {isCashier && <p className="mt-4 text-purple-700">Bạn là thu ngân. Có thể tạo đơn hàng và thanh toán.</p>}

            {/* Bạn có thể thêm component theo role tại đây */}
        </div>
    );
};

export default OverviewPage;

// src/utils/permission.js
export const checkPermission = (role, allowedRoles) => {
    if (!role) return false;
    return allowedRoles.includes(role);
};

// src/routes/routeConfig.jsx
import { lazy } from "react";
import { Navigate } from "react-router-dom";

const LoginPage = lazy(() => import("../pages/LoginPage"));
const RegisterPage = lazy(() => import("../pages/RegisterPage"));
const VerifyEmailPage = lazy(() => import("../pages/VerifyEmailPage"));
const ForgotPasswordPage = lazy(() => import("../pages/ForgotPasswordPage"));
const AdminPage = lazy(() => import("../pages/admin/AdminPage"));
const ShopSelectPage = lazy(() => import("../pages/shop/ShopSelectPage"));
const CreateShopPage = lazy(() => import("../pages/shop/CreateShopPage"));
const OverviewPage = lazy(() => import("../pages/OverviewPage"));
const ProductListPage = lazy(() => import("../pages/products/ProductListPage"));
const DashboardLayout = lazy(() => import("../layouts/DashboardLayout"));
const NotFoundPage = lazy(() => import("../pages/NotFoundPage"));
const ShopSettingsPage = lazy(() => import("../pages/shop/ShopSettingsPage"));

export const routeConfig = [
    { path: "/login", element: <LoginPage />, guestOnly: true, title: "Đăng nhập" },
    { path: "/register", element: <RegisterPage />, guestOnly: true, title: "Đăng ký tài khoản" },
    { path: "/verify", element: <VerifyEmailPage />, title: "Xác thực email" },
    { path: "/forgot-password", element: <ForgotPasswordPage />, title: "Quên mật khẩu" },

    { path: "/admin", element: <AdminPage />, protected: true, roles: ["ROLE_ADMIN"], title: "Trang quản trị" },
    { path: "/select-shop", element: <ShopSelectPage />, protected: true, roles: ["ROLE_USER"], title: "Chọn cửa hàng" },
    { path: "/create-shop", element: <CreateShopPage />, protected: true, roles: ["ROLE_USER"], title: "Tạo cửa hàng" },
    {
        path: "/shop-settings",
        element: <ShopSettingsPage />,
        protected: true,
        roles: ["ROLE_USER"],
        title: "Cài đặt cửa hàng",
    },
    {
        path: "/",
        protected: true,
        roles: ["ROLE_USER"],
        element: <DashboardLayout />,
        children: [
            { index: true, element: <Navigate to="overview" /> },
            { path: "overview", element: <OverviewPage />, title: "Tổng quan" },
            { path: "products", element: <ProductListPage />, title: "Sản phẩm" },
        ],
    },
    { path: "*", element: <NotFoundPage />, title: "Không tìm thấy trang" },
];

// src/routes/RouteWithTitle.jsx
import { useEffect } from "react";

const RouteWithTitle = ({ element, title }) => {
    useEffect(() => {
        if (title) {
            document.title = `${title} | Sales System`;
        }
    }, [title]);

    return element;
};

export default RouteWithTitle;

// src/pages/shop/ShopSelectPage.jsx
import { useShop } from "../../hooks/useShop";
import { useNavigate } from "react-router-dom";
import { useEffect } from "react";

const ShopSelectPage = () => {
    const { shops, setSelectedShopId } = useShop();
    const navigate = useNavigate();

    useEffect(() => {
        if (shops.length === 0) {
            navigate("/create-shop");
        } else if (shops.length === 1) {
            setSelectedShopId(shops[0].id);
            navigate("/overview");
        }
    }, [shops, setSelectedShopId, navigate]);

    const handleSelect = (id) => {
        setSelectedShopId(id);
        navigate("/overview");
    };

    return (
        <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 px-4">
            <div className="bg-white p-8 rounded-lg shadow w-full max-w-md">
                <h2 className="text-xl font-semibold mb-4 text-center">Chọn cửa hàng</h2>
                {shops.length === 0 ? (
                    <p className="text-gray-600 text-center">Bạn chưa tham gia cửa hàng nào.</p>
                ) : (
                    <ul className="space-y-4">
                        {shops.map(shop => (
                            <li
                                key={shop.id}
                                className="border rounded p-4 hover:bg-gray-50 cursor-pointer"
                                onClick={() => handleSelect(shop.id)}
                            >
                                <p className="font-medium">{shop.name}</p>
                                <p className="text-sm text-gray-500">Vai trò: {shop.role}</p>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

export default ShopSelectPage;

// src/pages/shop/ShopSettingsPage.jsx
import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import axiosInstance from "../../api/axiosInstance.js";
import { SHOP_TYPES } from "../../constants/shopTypes.js";
import { useShop } from "../../hooks/useShop.js";

const ShopSettingsPage = () => {
    const { isOwner, fetchShops } = useShop();
    const navigate = useNavigate();
    const fileInputRef = useRef(null);

    const [shop, setShop] = useState(null);
    const [logoFile, setLogoFile] = useState(null);
    const [previewUrl, setPreviewUrl] = useState(null);

    const [loading, setLoading] = useState(false);
    const [deleting, setDeleting] = useState(false);
    const [confirmDelete, setConfirmDelete] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        if (!isOwner) navigate("/overview", { replace: true });
    }, [isOwner, navigate]);

    useEffect(() => {
        axiosInstance.get("/shop/me").then((res) => {
            const data = res.data.data;
            setShop(data);
            setPreviewUrl(data.logoUrl || null);
        });
    }, []);

    const handleImageChange = (e) => {
        const file = e.target.files[0];
        setLogoFile(file);
        setPreviewUrl(URL.createObjectURL(file));
    };

    const handleImageRemove = () => {
        setLogoFile(null);
        setPreviewUrl(null);
    };

    const handleChange = (field, value) => {
        setShop((prev) => ({ ...prev, [field]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError(null);

        try {
            const formData = new FormData();
            formData.append("shop", new Blob([JSON.stringify(shop)], { type: "application/json" }));
            if (logoFile) formData.append("file", logoFile);

            await axiosInstance.put("/shop/me", formData, {
                headers: { "Content-Type": "multipart/form-data" },
            });

        } catch (err) {
            console.error("Lỗi khi cập nhật shop:", err);
            setError("Không thể cập nhật cửa hàng.");
        } finally {
            setLoading(false);
        }
    };

    const handleDelete = async () => {
        if (!confirmDelete) return setConfirmDelete(true);
        setDeleting(true);
        try {
            await axiosInstance.delete("/shop");
            localStorage.removeItem("selectedShopId");
            await fetchShops();
            navigate("/select-shop");
        } catch (err) {
            console.error("Lỗi khi xoá cửa hàng:", err);
        } finally {
            setDeleting(false);
        }
    };

    if (!shop) return <div>Đang tải...</div>;

    return (
        <form onSubmit={handleSubmit} className="max-w-xl space-y-4">
            <h1 className="text-xl font-bold">Quản lý cửa hàng</h1>

            {error && <p className="text-red-600">{error}</p>}

            {/* 🖼 Logo */}
            <div>
                <label className="block font-medium mb-1">Logo cửa hàng</label>
                {previewUrl ? (
                    <div className="mb-2">
                        <img src={previewUrl} alt="preview" className="w-32 h-32 object-cover rounded border" />
                        <button
                            type="button"
                            onClick={handleImageRemove}
                            className="text-red-500 text-sm mt-1 underline"
                        >
                            Xoá ảnh
                        </button>
                    </div>
                ) : (
                    <button
                        type="button"
                        className="text-blue-600 underline text-sm"
                        onClick={() => fileInputRef.current.click()}
                    >
                        Chọn ảnh
                    </button>
                )}
                <input
                    type="file"
                    accept="image/*"
                    ref={fileInputRef}
                    hidden
                    onChange={handleImageChange}
                />
            </div>

            {/* Tên cửa hàng */}
            <div>
                <label className="block font-medium">Tên cửa hàng</label>
                <input
                    value={shop.name}
                    onChange={(e) => handleChange("name", e.target.value)}
                    className="w-full border px-3 py-2 rounded"
                />
            </div>

            {/* Loại hình */}
            <div>
                <label className="block font-medium">Loại hình</label>
                <select
                    value={shop.type}
                    onChange={(e) => handleChange("type", e.target.value)}
                    className="w-full border px-3 py-2 rounded"
                >
                    {SHOP_TYPES.map((t) => (
                        <option key={t.value} value={t.value}>
                            {t.label}
                        </option>
                    ))}
                </select>
            </div>

            {/* Số điện thoại */}
            <div>
                <label className="block font-medium">Số điện thoại</label>
                <input
                    value={shop.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                    className="w-full border px-3 py-2 rounded"
                />
            </div>

            {/* Địa chỉ */}
            <div>
                <label className="block font-medium">Địa chỉ</label>
                <input
                    value={shop.address}
                    onChange={(e) => handleChange("address", e.target.value)}
                    className="w-full border px-3 py-2 rounded"
                />
            </div>

            <div className="pt-4">
                <button
                    type="submit"
                    disabled={loading}
                    className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                >
                    {loading ? "Đang lưu..." : "Cập nhật"}
                </button>
            </div>

            {/* ❌ XÓA SHOP */}
            <div className="pt-6 text-sm text-red-600 border-t mt-6">
                <p className="mb-2">⚠️ Xóa cửa hàng là hành động không thể hoàn tác.</p>
                <button
                    type="button"
                    onClick={handleDelete}
                    disabled={deleting}
                    className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
                >
                    {confirmDelete ? (deleting ? "Đang xoá..." : "Xác nhận xoá") : "Xoá cửa hàng"}
                </button>
            </div>
        </form>
    );
};

export default ShopSettingsPage;

// src/constants/shopTypes.js
export const SHOP_TYPES = [
    { value: "RESTAURANT", label: "Nhà hàng", trackInventory: false },
    { value: "CAFE", label: "Quán cafe", trackInventory: false },
    { value: "BAR", label: "Quán bar", trackInventory: false },
    { value: "GROCERY", label: "Tạp hóa", trackInventory: true },
    { value: "CONVENIENCE", label: "Cửa hàng tiện lợi", trackInventory: true },
    { value: "PHARMACY", label: "Hiệu thuốc", trackInventory: true },
    { value: "RETAIL", label: "Cửa hàng bán lẻ", trackInventory: true },
    { value: "OTHER", label: "Khác", trackInventory: false }
];

// src/constants/countries.js
export const COUNTRIES = [
    { code: "VN", name: "Việt Nam", dialCode: "+84", phonePattern: /^0(3|5|7|8|9)\d{8}$/ },
    { code: "US", name: "Hoa Kỳ", dialCode: "+1", phonePattern: /^\d{10}$/ },
    { code: "JP", name: "Nhật Bản", dialCode: "+81", phonePattern: /^\d{10}$/ },
    { code: "KR", name: "Hàn Quốc", dialCode: "+82", phonePattern: /^\d{9,10}$/ }
]

// src/hooks/useBreadcrumbs.js
import { useLocation, matchRoutes } from "react-router-dom";
import { routeConfig } from "../routes/routeConfig.jsx";

export const useBreadcrumbs = () => {
    const location = useLocation();

    // matchRoutes sẽ tìm tất cả route phù hợp với URL hiện tại
    const matches = matchRoutes(routeConfig, location.pathname);

    if (!matches) return [];

    // Trả ra mảng breadcrumb { title, path }
    return matches
        .map(({ route, pathname }) => {
            const title = route.title || null;
            if (!title) return null;
            return { title, path: pathname };
        })
        .filter(Boolean); // loại bỏ null
};


